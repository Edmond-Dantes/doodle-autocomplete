// src/shapes/BatShape.tsx
import {
  BaseBoxShapeUtil,
  HTMLContainer,
  T,
  type TLBaseShape,
  type RecordProps,
  useDefaultColorTheme,
  // built-in style props / types
  DefaultColorStyle, type TLDefaultColorStyle,
  DefaultFillStyle,  type TLDefaultFillStyle,
  DefaultDashStyle,  type TLDefaultDashStyle,
  DefaultSizeStyle,  type TLDefaultSizeStyle,
  DefaultFontStyle,  type TLDefaultFontStyle,
  DefaultTextAlignStyle, type TLDefaultTextAlignStyle,
  STROKE_SIZES, FONT_SIZES,
} from 'tldraw'


export type BatShape = TLBaseShape<'bat', {
  w: number
  h: number
  text: string
  isDraft: boolean
  color: TLDefaultColorStyle
  fill: TLDefaultFillStyle
  dash: TLDefaultDashStyle
  size: TLDefaultSizeStyle
  font: TLDefaultFontStyle
  textAlign: TLDefaultTextAlignStyle
}>

export class BatShapeUtil extends BaseBoxShapeUtil<BatShape> {
  static override type = 'bat' as const

  // Declare style props → tldraw shows the matching style controls
  static override props: RecordProps<BatShape> = {
    w: T.number,
    h: T.number,
    text: T.string,
    isDraft: T.boolean,
    color: DefaultColorStyle,
    fill: DefaultFillStyle,
    dash: DefaultDashStyle,
    size: DefaultSizeStyle,
    font: DefaultFontStyle,
    textAlign: DefaultTextAlignStyle,
  }

  getDefaultProps(): BatShape['props'] {
    return {
      w: 100,
      h: 100,
      text: '',
      isDraft: false,
      color: 'light-red',
      fill: 'none',     // head fill (we’ll map this)
      dash: 'solid',
      size: 'm',        // drives stroke width
      font: 'sans',
      textAlign: 'middle',
    }
  }

component(shape: BatShape) {
  const { w, h, color, fill, dash, size, isDraft } = shape.props
  const theme = useDefaultColorTheme()

  const stroke = theme[color].solid
  const sw = STROKE_SIZES[size]
  const dashArray =
    dash === 'dotted' ? `${sw} ${sw}` :
    dash === 'dashed' ? `${sw * 2} ${sw * 2}` :
    undefined

  // proportions
  const cx = w / 2
  const headR      = Math.min(w, h) * 0.14
  const headCY     = headR + sw + h * 0.02
  const neckY      = headCY + headR
  const shouldersY = neckY + h * 0.06
  const hipsY      = h * 0.68
  const feetY      = h * 0.95
  const leftArmX   = w * 0.18
  const rightArmX  = w * 0.82
  const leftLegX   = w * 0.36
  const rightLegX  = w * 0.64

  const headFill =
    fill === 'semi'  ? theme[color].semi :
    fill === 'solid' ? theme[color].solid :
    'none'

  return (
    <HTMLContainer style={{ width: w, height: h, opacity: isDraft ? 0.6 : 1 }}>
      <svg width={w} height={h} viewBox="0 0 100 100" style={{ display: 'block' }}>
        <g fill={stroke} stroke="none">
          <path d="M58.55,87.14c0.77,0.65,1.6,1.11,2.06,1.82c0.3,0.47,0.32,1.54-0.01,1.88c-0.33,0.34-1.39,0.34-1.88,0.05
            c-0.68-0.4-1.11-1.21-1.79-2.01c-0.69,0.67-1.17,1.12-1.63,1.58c-0.74,0.75-1.56,1.39-2.49,0.41c-0.86-0.9-0.31-1.72,0.44-2.39
            c0.51-0.45,1.07-0.85,1.57-1.24c-0.58-1.07-1.03-1.81-1.39-2.6c-0.34-0.75-0.6-1.54-0.87-2.25c-2.08,0-4.11,0-6.24,0
            c-0.63,1.38-1.34,2.92-2.31,5.04c0.43,0.31,1.18,0.77,1.83,1.35c0.72,0.65,0.83,1.47,0.07,2.17c-0.71,0.66-1.47,0.46-2.07-0.2
            c-0.52-0.57-0.95-1.23-1.72-2.25c-0.84,1.04-1.32,1.72-1.89,2.31c-0.62,0.64-1.39,0.77-2.07,0.09c-0.67-0.68-0.58-1.46,0.08-2.07
            c0.64-0.6,1.38-1.08,2.08-1.61c-2.19-2.93-2.68-5.84-2.62-8.96c0.09-4.99-0.04-9.97,0.06-14.96c0.03-1.5-0.51-2.13-1.86-2.59
            c-6.24-2.11-12.38-2-18.45,0.62c-2.64,1.14-3.06,0.88-3.3-2.05c-0.23-2.87-0.4-5.76-0.74-8.62c-0.68-5.71-3.07-10.67-7-14.86
            c-0.78-0.83-1.04-1.64-0.87-2.76c0.98-6.25,0.1-12.26-2.53-18.02c-0.86-1.88-0.65-2.35,1.29-3.01c2.45-0.83,4.9-1.69,7.38-2.42
            c0.68-0.2,1.57-0.18,2.22,0.09c6.44,2.7,12.84,5.51,19.28,8.21c1.3,0.55,1.62,1.33,1.39,2.64c-1.22,6.81-1.24,13.61,0.42,20.37
            c0.12,0.47,0.24,0.95,0.38,1.41c0.02,0.08,0.12,0.14,0.39,0.42c0.6-1.8,1.15-3.47,1.7-5.13c0.76-2.29,1.66-2.52,3.38-0.81
            c1.53,1.51,3.03,3.06,4.57,4.56c1.57,1.53,2.8,3.25,3.42,5.38c0.07,0.25,0.27,0.47,0.56,0.95c0.28-0.48,0.44-0.78,0.63-1.07
            c1.05-1.68,1.95-3.49,3.2-5c1.52-1.84,3.33-3.44,5.05-5.11c1.31-1.28,2.31-1.04,2.91,0.69c0.62,1.79,1.22,3.59,1.82,5.39
            c0.15,0.02,0.29,0.03,0.44,0.05c0.42-2.1,0.92-4.2,1.23-6.32c0.77-5.22,0.53-10.44-0.42-15.62c-0.28-1.55,0.19-2.31,1.62-2.91
            c6.31-2.63,12.57-5.39,18.88-8.02c0.73-0.3,1.73-0.35,2.49-0.13c2.58,0.75,5.11,1.65,7.65,2.53c1.41,0.49,1.71,1.11,1.08,2.44
            c-2.84,6.01-3.72,12.29-2.72,18.86c0.1,0.65-0.25,1.57-0.71,2.07c-4.63,5.02-7.09,10.92-7.43,17.73c-0.11,2.29-0.35,4.58-0.53,6.87
            c-0.14,1.75-0.92,2.23-2.55,1.48c-6.25-2.86-12.61-3.13-19.12-0.92c-1.35,0.46-1.9,1.07-1.87,2.58c0.11,5.08-0.02,10.17,0.06,15.25
            C61.16,81.56,60.6,84.36,58.55,87.14z M67.86,25.83c0,0.64-0.01,0.93,0,1.22c0.51,9.77-1.62,18.92-6.41,27.46
            c-0.23,0.4-0.34,0.91-0.35,1.38c-0.03,0.98-0.41,1.66-1.42,1.68c-0.94,0.02-1.37-0.62-1.44-1.52c-0.15-1.95-1.33-3.22-2.89-4.16
            c-2.34-1.42-4.94-1.96-7.61-1.47c-3.55,0.65-6.77,1.82-7.32,6.17c-0.05,0.39-0.99,1.01-1.38,0.93c-0.5-0.11-0.99-0.77-1.28-1.3
            c-0.31-0.57-0.24-1.34-0.56-1.91c-4.52-8.2-6.66-16.96-6.31-26.32c0.02-0.61,0-1.22,0-2.09c-7.33,9.77-13.39,19.77-13.7,32.38
            c0.55-0.16,1-0.29,1.45-0.43c6.85-2.19,13.57-1.83,20.17,1.03c1.24,0.54,1.8,1.25,1.75,2.66c-0.1,3.13-0.08,6.26-0.02,9.39
            c0.09,4.51,2.76,7.37,6.72,8.52c5,1.45,10.88-2.51,10.96-8.33c0.04-3.27,0.04-6.55-0.01-9.83c-0.02-1.13,0.41-1.8,1.44-2.27
            c5.57-2.53,11.34-3.21,17.32-2c1.52,0.31,3,0.78,4.59,1.21C81.31,45.66,75.21,35.67,67.86,25.83z M6.12,14.4
            c0.75,2.77,1.62,5.28,2.07,7.86c0.46,2.61,0.51,5.29,0.76,8.14c5.92-5.26,13.35-7.56,20.33-10.78c-0.18-0.24-0.22-0.35-0.29-0.38
            c-5.24-2.26-10.48-4.52-15.74-6.76c-0.29-0.13-0.69-0.2-0.98-0.11C10.19,13.03,8.12,13.74,6.12,14.4z M69.17,19.5
            c3.93,1.7,7.53,3.06,10.94,4.79c3.4,1.72,6.62,3.82,9.96,5.77c-0.27-5.29,0.68-10.51,2.81-15.59c-2.16-0.72-4.14-1.4-6.14-2.04
            c-0.34-0.11-0.8-0.11-1.12,0.02C80.28,14.73,74.95,17.02,69.17,19.5z M8.97,34.34c3.32,3.72,5.53,8.08,6.96,12.96
            c2.35-9.22,8.22-16.44,13.27-24.29C22.69,24.6,11.96,30.63,8.97,34.34z M69.45,22.78c5.24,8.09,11.08,15.35,13.45,24.55
            c1.38-4.94,3.64-9.26,6.98-13.06C84.22,28.54,76.97,25.91,69.45,22.78z M46.05,47.38c-0.95-3.26-3.98-4.96-6.3-7.69
            c-0.77,2.39-1.54,4.35-2.01,6.38c-0.48,2.03,0.24,3.8,1.5,5.04C41.56,49.84,43.68,48.68,46.05,47.38z M59.48,51.06
            c2.92-2.48,1.79-5.69-0.56-10.99c-4.1,3.74-5.94,5.45-6.08,7.35C55.07,48.65,57.23,49.83,59.48,51.06z M41.59,84.56
            c0.18-0.03,0.35-0.06,0.53-0.1c1.94-2.56,1.62-3.8-1.89-5.68C40.74,80.93,41.16,82.74,41.59,84.56z M58.5,79.09
            c-0.19-0.07-0.39-0.14-0.58-0.22c-0.86,0.82-2.19,1.51-2.45,2.48c-0.24,0.93,0.64,2.15,1.03,3.25c0.24-0.01,0.48-0.03,0.72-0.04
            C57.64,82.74,58.07,80.91,58.5,79.09z"/>
          <path d="M49.41,57.65c-0.84,1.08-1.29,1.78-1.86,2.37c-0.62,0.65-1.39,0.76-2.06,0.08c-0.67-0.68-0.55-1.43,0.07-2.08
            c0.87-0.92,1.77-1.81,2.68-2.69c0.76-0.74,1.56-0.73,2.32,0c0.91,0.88,1.81,1.77,2.68,2.69c0.62,0.65,0.73,1.41,0.06,2.08
            c-0.68,0.68-1.45,0.56-2.06-0.09C50.68,59.42,50.23,58.72,49.41,57.65z"/>
          <path d="M45.13,56.54c-0.54,0.35-1.14,1.03-1.62,0.96c-0.51-0.07-0.92-0.86-1.38-1.34c0.48-0.45,0.93-1.22,1.44-1.27
            c0.49-0.05,1.04,0.66,1.57,1.03C45.14,56.13,45.13,56.34,45.13,56.54z"/>
          <path d="M54.92,57.79c-0.35-0.55-1.03-1.14-0.96-1.62c0.08-0.51,0.88-1.28,1.34-1.27c0.47,0.01,1.22,0.83,1.27,1.34
            c0.05,0.48-0.67,1.04-1.05,1.56C55.33,57.8,55.12,57.8,54.92,57.79z"/>
        </g>
      </svg>
    </HTMLContainer>
  )
}


  indicator(shape: BatShape) {
    const { w, h } = shape.props
    const r = Math.min(h / 2, 999)
    return <rect width={w} height={h} rx={r} ry={r} />
  }
}
